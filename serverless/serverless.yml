service: translate-function

frameworkVersion: '3'

custom:
  application: 'translate'
  logGroupName: ${ssm:/translate/log/translate_function_${sls:stage}}
  iamRoleName: ${ssm:/translate/iam_role/lambda_function_${sls:stage}}
  serverless-layers:
    functions:
      - translate
    dependenciesPath: ./layers/requirements.txt
  dynamodb:
    stages:
      - dev
    start:
      port: ${env:DYNAMODB_LOCAL_PORT}
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true

params:
  prod:
    dynamodbEndpoint: https://dynamodb.ap-northeast-1.amazonaws.com
    translateHistoryTable: translate-history
  stg:
    dynamodbEndpoint: https://dynamodb.ap-northeast-1.amazonaws.com
    translateHistoryTable: translate-history-${sls:stage}
  dev:
    dynamodbEndpoint: ${env:DYNAMODB_ENDPOINT, 'http://localhost:${env:DYNAMODB_LOCAL_PORT}'}
    translateHistoryTable: translate-history-${sls:stage}

package:
  individually: true
  exclude:
    - .docker/**
    - .dynamodb/**
    - layers/**
    - yarn.lock
    - .tool-versions
    - docker-compose.yml

provider:
  name: aws
  runtime: python3.9
  region: ${env:AWS_REGION}
  endpointType: regional
  deploymentBucket:
    name: translate-sls
  apiName: translate-api-${sls:stage}
  apiGateway:
    description: 'API Gateway for created translate-function-${sls:stage}'
  iam:
    role: ${self:custom.iamRoleName}
  tags:
    Application: '${self:custom.application}'
    Environment: '${sls:stage}'

functions:
  translate:
    name: translate-function-${sls:stage}
    handler: functions/translate_handler.translate
    description: 'Providing a function to convert English to Japanese'
    environment:
      DYNAMODB_ENDPOINT: ${param:dynamodbEndpoint}
      TRANSLATE_HISTORY_TABLE: ${param:translateHistoryTable}
    events:
      - http:
          method: get
          path: /translate
          request:
            parameters:
              querystrings:
                input_text: false

resources:
  extensions:
    TranslateLogGroup:
      Properties:
        LogGroupName: ${self:custom.logGroupName}
        RetentionInDays: 30
        Tags: 
          - key: Application
            Value: '${self:custom.application}'
          - key: Environment
            Value: '${sls:stage}'
          - key: Description
            Value: 'CloudWatch log group for created translate-function-${sls:stage}'
  Resources:
    translateHistory:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:translateHistoryTable}
        AttributeDefinitions:
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: timestamp
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    LambdaFunctionName:
      Value: 
        "Ref": TranslateLambdaFunction
      Export:
        Name: lambda-function-name-${sls:stage}
    LambdaFunctionArn:
      Value: 
        "Fn::GetAtt": [TranslateLambdaFunction, Arn]
      Export:
        Name: lambda-function-arn-${sls:stage}

plugins:
  - serverless-layers
  - serverless-dynamodb-local
  - serverless-offline
